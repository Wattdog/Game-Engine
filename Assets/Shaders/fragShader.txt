#version 410

uniform mat4 u_View;
uniform sampler2D u_Texture;

varying vec2 v_Texcoord;
varying vec3 v_FragPos;
varying vec3 v_Normal;

void main()
{
	vec3 lightPos = vec3(10, 10, 0);
	float ambientStrength = 0.1;
	vec3 lightColor = vec3(1,1,1);

	vec3 ambient = ambientStrength * lightColor;
	vec3 norm = normalize(v_Normal);
	vec3 lightDir = normalize(lightPos - v_FragPos);

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * vec3(1,1,1) * lightColor;

	vec3 light = ambient + diffuse;
	vec4 tex = texture2D(u_Texture, v_Texcoord);
	
	vec3 viewPos = vec3(inverse(u_View) * vec4(0, 0, 0, 1));
	vec3 viewDir = normalize(viewPos - v_FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
	float specularStrength = 0.5;
	vec3 specular = specularStrength * spec * lightColor;

	gl_FragColor = vec4(ambient + diffuse + specular, 1.0) * tex;
}