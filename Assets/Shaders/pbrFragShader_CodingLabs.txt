#version 410

// Using parts from CodingLabs Article - Physically Based Rendering - Cook-Torrance

uniform mat4 u_View;

uniform vec3 albedo = {1, 1, 1};
uniform float metallic = 0.0f;
uniform float roughness = 0.1f;
uniform float ao = 1.0f;

uniform vec3 camPos;

uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];

in vec2 v_Texcoord;
in vec3 v_FragPos;
in vec3 v_Normal;

out vec4 FragColor;

const float PI = 3.14159265359;

float GGX_Distribution(vec3 n, vec3 h, float alpha)
{
	float NoH = dot(n, h);
	float alpha2 = alpha * alpha;
	float NoH2 = NoH * NoH;
	float den = NoH2 * alpha2 + (1 - NoH2);
	return (NoH * alpha2) / (PI * den * den);
}

float GGX_PartialGeometryTerm(vec3 v, vec3 n, vec3 h, float alpha)
{
	float VoH2 = max(dot(v, h), 0.0);
	float chi = VoH2 / max(dot(v, n), 0.0);
	VoH2 = VoH2 * VoH2;
	float tan2 = (1 - VoH2) / VoH2;
	return (chi * 2) / (1 / sqrt(1 + alpha * alpha * tan2));
}

vec3 Fresnel_Schlick(float cosT, vec3 F0)
{
	return F0 + (1 - F0) * pow(1 - cosT, 5);
}

void main()
{
	vec3 N = normalize(v_Normal);
	vec3 V = normalize(camPos - v_FragPos);

	vec3 F0 = vec3(0.04);
	F0 = mix(F0, albedo, metallic);

	vec3 Lo = vec3(0.0);

	for (int i = 0; i < 4; i++)
	{
		vec3 L = normalize(lightPositions[i] - v_FragPos);
		vec3 H = normalize(V + L);

		float distance = length(lightPositions[i] - v_FragPos);
		float attenuation = 1.0;

		vec3 radiance = lightColors[i] * attenuation;

		float NDF = GGX_Distribution(N, H, roughness);
		float G = GGX_PartialGeometryTerm(N, V, L, roughness);
		vec3 F = Fresnel_Schlick(max(dot(H, V), 0.0), F0);

		vec3 kS = F;
		vec3 kD = vec3(1.0) - kS;
		kD *= 1.0 - metallic;

		vec3 numerator = NDF * G * F;
		float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
		vec3 specular = numerator / denominator;

		float NdotL = max(dot(N, L), 0.0);
		Lo += (kD * albedo / PI + specular) * radiance * NdotL;
	}

	vec3 ambient = vec3(0.03) * albedo * ao;
	vec3 color = ambient + Lo;

	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/1.2));

	FragColor = vec4(color, 1.0f);
}