#version 430

in vec3 eyeSpaceNormalV;
in vec3 eyeSpaceLightPosV;
in vec3 eyeSpaceVertPosV;

uniform vec3 lightColour = {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour = {0.1f,0.1f,0.2f};
uniform float alpha = 1.0f;

out vec4 FragColor;

void main()
{
	vec3 lightDir = normalize(eyeSpaceLightPosV - eyeSpaceVertPosV);
	
	vec3 normal = normalize(eyeSpaceNormalV);
	
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * vec3(1,1,1) * lightColour;
	
	vec3 viewDir = normalize(-eyeSpaceVertPosV);
	vec3 reflectDir = reflect(-lightDir, normal);
	
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	float specularStrength = 0.5;
	vec3 specular = specularStrength * spec * lightColour;

	FragColor = vec4(ambientColour + diffuse + specular, alpha);
}