#version 410

uniform mat4 u_View;
uniform sampler2D u_Texture;

uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];

varying vec2 v_Texcoord;
varying vec3 v_FragPos;
varying vec3 v_Normal;

const float PI = 3.14159265359;

vec3 getNormalFromMap()
{
	vec3 tangentNormal = texture(normalMap, v_Texcoord).xyz * 2.0 - 1.0;

	vec3 Q1 = dFdx(v_FragPos);
	vec3 Q2 = dFdy(v_FragPos);
	vec3 st1 = dFdx(v_Texcoord);
	vec3 st2 = dFdy(v_Texcoord);

	vec3 N = normalize(v_Normal);
	vec3 T = normalize(Q1 * st2.t - Q2 * st1.t);
	vec3 B = -normalize(cross(N, T));
	mat3 TBN = mat3(T, B, N);

	return normalize(TBN * tangentNormal);
}

float DistributionGGX(vec3 N, vec3 H, float a)
{
	float a2 = a * a;
	float NdotH = max(dot(N,H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float k)
{
	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float k)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx1 = GeometrySchlickGGX(NdotV, k);
	float ggx2 = GeometrySchlickGGX(NdotL, k);

	return ggx1 * ggx2;
}

vec3 frenselSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

void main()
{
	vec3 albedo = pow(texture(albedoMap, v_Texcoord).rgb, vec3(2.2));
	float metallic = texture(metallicMap, v_Texcoord).r;
	float roughness = texture(roughnessMap, v_Texcoord).r;
	float ao = texture(aoMap, v_Texcoord).r;

	vec3 N = getNormalFromMap();
	vec3 V = normalize(camPos - v_FragPos);

	vec3 F0 = vec3(0.04);
	F0 = mix(F0, albedo, metallic);

	vec3 Lo = vec3(0.0);

	for (int i = 0; i < 4; i++)
	{
		vec3 L = normalize(lightPositions[i] - v_FragPos);
		vec3 H = normalize(V + L);

		float distance = length(lightPositions[i] - v_FragPos);
		float attenuation = 1.0 / (distance * distance);
		vec3 radiance = lightColors[i] * attenuation;

		float NDF = DistributionGGX(N, H, roughness);
		float G = GeometrySmith(N, V, L, roughness);
		vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

		vec3 numerator = NDF * G * F;
		float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
		vec3 specular = numerator / denominator;

		vec3 kS = F;

		vec3 kD = vec3(1.0) - kS;

		kD *= 1.0 - metallic;

		float NdotL = max(dot(N, L), 0.0);

		Lo += (kD * albedo / PI + specular) * radiance * NdotL;
	}

	vec3 ambient = vec3(0.03) * albedo * ao;

	vec3 color = ambient + Lo;

	color = color / (color + vec3(1.0));

	color = pow(color, vec3(1.0/2.2));

	gl_FragColor = vec4(color, 1.0);
}